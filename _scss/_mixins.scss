@mixin when($breakpoint) {
    @media screen and (min-width: $breakpoint) {
        @content;
    }
}


@mixin whenMax($breakpoint) {
    @media screen and (max-width: $breakpoint) {
        @content;
    }
}


@mixin vendor($name, $argument) {
    -webkit-#{$name}: #{$argument};
       -moz-#{$name}: #{$argument};
        -ms-#{$name}: #{$argument};
         -o-#{$name}: #{$argument};
            #{$name}: #{$argument};
}


@mixin background-image($color, $opacity, $image) {
    background: -webkit-linear-gradient(rgba($color, $opacity), rgba($color, $opacity)), url($image);
    background:    -moz-linear-gradient(rgba($color, $opacity), rgba($color, $opacity)), url($image);
    background:      -o-linear-gradient(rgba($color, $opacity), rgba($color, $opacity)), url($image);
    background:         linear-gradient(rgba($color, $opacity), rgba($color, $opacity)), url($image);
}


@function strip-units($number) {
    @return $number / ($number * 0 + 1);
}


@mixin font-size($sizeValue: 1) {
    $sizeValue: strip-units($sizeValue);

    font-size: $sizeValue + px;
    font-size: ($sizeValue / strip-units($font-size)) + rem;
}


@mixin em($property, $values, $unit: em) {
    $max: length($values);
    $pxValues: '';
    $emValues: '';

    @for $i from 1 through $max {
        $value: strip-units(nth($values, $i));
        $pxValues: #{$pxValues + $value}px;

        @if $i < $max {
            $pxValues: #{$pxValues + " "};
        }
    }

    @for $i from 1 through $max {
        $value: strip-units(nth($values, $i));
        $emValues: #{$emValues + $value / strip-units($font-size)}$unit;

        @if $i < $max {
            $emValues: #{$emValues + " "};
        }
    }

    #{$property}: $pxValues;
    #{$property}: $emValues;
}


@mixin rem($property, $values) {
    @include em($property, $values, rem);
}
